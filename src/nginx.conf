# performance tuning links
# https://www.nginx.com/blog/tuning-nginx/
# https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/linux-nginx?view=aspnetcore-2.2
# https://aspnetmonsters.com/2016/07/2016-07-17-nginx/
# https://serverfault.com/questions/787919/optimal-value-for-nginx-worker-connections
# https://gist.github.com/denji/8359866
# (blocking + thread pools) - https://www.nginx.com/blog/thread-pools-boost-performance-9x/
# letsencrypt - https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-18-04
# trouble-shooting - https://techoverflow.net/2018/04/23/how-to-easily-find-errors-in-nginx-config-files/
    
# helpful commands for monitoring
# htop
# lshw -short -class cpu
# sudo ps -elf | grep nginx
# sudo ps -elf | grep dotnet
# sudo ps -elf | grep appx
# sudo systemctl status nginx

#number of worker processes to spawn
# set # == to CPU cores or auto - adjust to obtain optimal performance
worker_processes  1;  # can also use 'auto' instead of an integer
user www-data;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

# number of file descriptors used for nginx
# the limit for the maximum FDs on the server is usually set by the OS.
# if you don't set FD's then OS settings will be used which is by default 2000
worker_rlimit_nofile 100000;

# in the 'main' context
thread_pool default threads=32 max_queue=65536;

# only log critical errors
# error_log /var/log/nginx/error.log crit; 

#maximum number of connections
events {
  # determines how much clients will be served per worker
  # max clients = worker_connections * worker_processes
  # max clients is also limited by the number of socket connections available on the system (~64k)
    worker_connections  10240;  # this is a *max* limit, not minimum
    
  # optimized to serve many clients with each thread, essential for linux -- for testing environment
    use epoll;

  # accept as many connections as possible, may flood worker connections if set too low -- for testing environment
    multi_accept on;
}
    
http {
    # include       proxy.conf;
    # this the below proxy_set_header should be set in the app.conf vs global
    #proxy_redirect          off;
    #proxy_set_header        Host $host;
    #proxy_set_header        X-Real-IP $remote_addr;
    #proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
    #proxy_set_header        X-Forwarded-Proto $scheme;
    client_body_buffer_size 128k;
    # https://www.techrepublic.com/article/3-quick-steps-to-optimize-the-performance-of-your-nginx-server/
    client_header_buffer_size 1k;
    client_max_body_size 8m;
    large_client_header_buffers 4 4k;
    proxy_connect_timeout   90;
    proxy_send_timeout      90;
    proxy_read_timeout      90;
    proxy_buffers           32 4k;
    # set up a proxy cache location
    proxy_cache_path /tmp/cache levels=1:2 keys_zone=aspnetcache:128m max_size=1000m inactive=5m;
    proxy_temp_path /tmp/cache/temp;
    # end include proxy.conf
    
    # set up mime types
    include       mime.types;
    default_type  application/octet-stream;
    
    # static file optimizations
    open_file_cache max=200000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

  # send headers in one piece, it is better than sending them one by one
    tcp_nopush on;

  # don't buffer data sent, good for small data bursts in real time
    tcp_nodelay on;
    
    server_names_hash_bucket_size 64; # prevents some bug -- google it
    limit_req_zone $binary_remote_addr zone=one:10m rate=5r/s;
    server_tokens  off;

    sendfile on;
    sendfile_max_chunk 512k;
    
    #compress the response stream with gzip
    gzip  on;
    # gzip_static on;
    gzip_min_length 10240;
    gzip_comp_level 1;
    gzip_vary on;
    #gzip_disable msie6;
    gzip_disable "MSIE [1-6]\.";  # dont allow older IE versions (sorry guys)
    gzip_proxied expired no-cache no-store private auth;
    gzip_types
        # text/html is always compressed by HttpGzipModule
        text/css
        text/javascript
        text/xml
        text/plain
        text/x-component
        application/javascript
        application/x-javascript
        application/json
        application/xml
        application/rss+xml
        application/atom+xml
        font/truetype
        font/opentype
        application/vnd.ms-fontobject
        image/svg+xml;

  # allow the server to close connection on non responding client, this will free up memory
    reset_timedout_connection on;

    client_header_timeout 10;

  # request timed out -- default 60
    client_body_timeout 10;

  # if client stop responding, free up memory -- default 60
    send_timeout 2;

  # server will close connection after this time -- default 75
  # # Adjust to the lowest possible value that makes sense for your use case.
    keepalive_timeout 15;

  # number of requests client can make over keep-alive -- for testing environment
    keepalive_requests 100000;

    upstream microbians.com{
        server localhost:5000;  # figure out how to enable ssl upstream
    }

    server {
        listen     *:80;
        add_header Strict-Transport-Security max-age=15768000;
        return     301 https://$host$request_uri;
    }

include /etc/nginx/conf.d/*.conf;
include /etc/nginx/sites-enabled/*;
    
# global level server config... try and use site specific server{} config
#    server {
#        listen                    *:443 http2 ssl;
#        server_name               microbians.com;
#        ssl_protocols             TLSv1.1 TLSv1.2 TLSv1.3;
#        ssl_prefer_server_ciphers on;
#        ssl_ciphers               "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
#        ssl_ecdh_curve            secp384r1;
#        ssl_session_cache         shared:SSL:10m;
#        ssl_session_tickets       off;
#        ssl_stapling              on; #ensure your cert is capable
#        ssl_stapling_verify       on; #ensure your cert is capable
#
#        add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";
#        add_header X-Frame-Options DENY;
#        add_header X-Frame-Options "SAMEORIGIN";
#        add_header X-Content-Type-Options nosniff;
#
#        #Redirects all traffic
#        location / {
#            proxy_pass http://microbians.com;
#            limit_req  zone=one burst=10 nodelay;
#        }
#    }
}